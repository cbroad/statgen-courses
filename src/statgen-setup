#!/usr/bin/env sos-runner
#fileformat=SOS1.0

[global]
# List of tutorial to launch
# see https://hub.docker.com/u/statisticalgenetics/ for a list of options
parameter: tutorial = []
parameter: my_name = 'hub_user'

import socket, random

def is_port_in_use(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

def get_ports(num):
    all_ports = list(range(1001, 8888))
    random.shuffle(all_ports)
    ports = []
    for idx, item in enumerate(all_ports):
        if not is_port_in_use(item):
            ports.append(item)
        if len(ports) >= num:
            break
    return ports

[build]
parameter: root_dir = path('./')
input: for_each = 'tutorial', concurrent = False
bash: expand = True, workdir = root_dir
    git pull
    docker build --build-arg DUMMY=`date +%s` -t statisticalgenetics/{_tutorial} -f docker/{_tutorial}.dockerfile docker && \
    docker push statisticalgenetics/{_tutorial}

[launch_1]
output: "~/.cache/cull_idle_servers.py", "~/.cache/jupyterhub_config.py"
bash:
    docker pull gaow/base-notebook
    mkdir -p $HOME/.cache
    curl -fsSL https://raw.githubusercontent.com/statgenetics/statgen-courses/master/src/cull_idle_servers.py -o $HOME/.cache/cull_idle_servers.py
    curl -fsSL https://raw.githubusercontent.com/statgenetics/statgen-courses/master/src/jupyterhub_config.py -o $HOME/.cache/jupyterhub_config.py

[launch_2]
fail_if(len(tutorial) == 0, msg = 'Please specify a list of tutorial to launch, via ``--tutorial`` option.')
fail_if(len(my_name) == 0, msg = 'Please assign yourself a username, via ``--my-name`` option.')
fail_if(not all((a.isalnum() or a == '_') and not a.isspace() for a in my_name), msg = 'Please use only alphanumeric letters and no space for ``--my-name`` input.')
input: for_each = 'tutorial', concurrent = False
docker_build: tag = f'{_tutorial}_{my_name}', expand = True, workdir = '~/.cache'
    FROM gaow/base-notebook
    USER root
    RUN mkdir -p /srv/jupyterhub/
    COPY jupyterhub_config.py /srv/jupyterhub/jupyterhub_config.py
    COPY cull_idle_servers.py /srv/jupyterhub/cull_idle_servers.py
    # modify the script to create a unique instance
    RUN sed -i 's/CONTAINER_NAME/{_tutorial}_{my_name}/g; s/IMAGE_NAME/statisticalgenetics\/{_tutorial}/g; s/HOST_DIR/\/root\/{my_name}/g' /srv/jupyterhub/jupyterhub_config.py
    EXPOSE 8000
    WORKDIR /srv/jupyterhub/
    LABEL org.jupyter.service="jupyterhub"
    CMD ["jupyterhub"]

[launch_3]
ports = get_ports(len(tutorial))
ip = get_output("hostname -I | awk '{print $1}'").strip()
#
input: for_each = 'tutorial', concurrent = False
bash: expand = True, workdir = '~/'
    set -e
    # Get the relevant image
    docker pull statisticalgenetics/{_tutorial}
    # Stop currently running instances to start from scratch
    docker container stop $(docker container ls -q --filter ancestor=statisticalgenetics/{_tutorial}) &> /dev/null || true
    docker container stop $(docker container ls -q --filter name={_tutorial}_{my_name}) &> /dev/null || true
    # Create a user folder for notebook instance and set the permission
    mkdir -p $HOME/{my_name}
    ## https://github.com/jupyterhub/dockerspawner/issues/160
    ## FIXME: there may be smarter solutions but this is what I have so far
    if [ $EUID -eq 0 ]; then
   	(chown 1000:100 $HOME/{my_name} && chmod g+rws $HOME/{my_name} && setfacl -d -m g::rwx $HOME/{my_name})
    fi
    # Start jupyterhub
    docker network inspect {_tutorial}_{my_name} &>/dev/null || docker network create {_tutorial}_{my_name}
    docker run --rm -it -d -v /var/run/docker.sock:/var/run/docker.sock --net {_tutorial}_{my_name} --name {_tutorial}_{my_name} -p{ports[_index]}:8000 {_tutorial}_{my_name}
    # Create a shortcut to access from browser
    (echo '<meta http-equiv="Refresh" content="0; url=http://{ip}:{ports[_index]}" />' 2> /dev/null 1> /var/www/html/{_tutorial}.html && printf '\nDone! Users can now access {_tutorial} tutorial at http://{ip}/{_tutorial}.html\n\n') || true

[login]
fail_if(len(tutorial) != 1, msg = 'Please specify a tutorial to launch, via ``--tutorial`` option.')
fail_if(len(my_name) == 0 or my_name == 'hub_user', msg = 'Please assign yourself a username, via ``--my-name`` option.')
fail_if(not all((a.isalnum() or a == '_') and not a.isspace() for a in my_name), msg = 'Please use only alphanumeric letters and no space for ``--my-name`` input.')
tutorial = tutorial[0]
port = ip = None
if tutorial == 'igv':
    port = get_ports(1)[0]
    ip = get_output("hostname -I | awk '{print $1}'").strip()
bash: expand = '$[ ]', workdir = '~/'
    cmd="docker exec -it sandbox_$[tutorial]_$[my_name] bash"
    echo "Logging in via: $cmd"
    {
    $cmd 2> /dev/null
    } || {
    # Stop currently running instances to start from scratch
    docker stop sandbox_$[tutorial]_$[my_name] &> /dev/null || true
    if [ "$[tutorial]" == "igv" ]
    then 
        docker run -d --rm --security-opt label:disable -t --name sandbox_$[tutorial]_$[my_name] -h $[tutorial]-$[my_name] -p $[port]:8080 statisticalgenetics/$[tutorial]
        printf '\nPlease access the IGV server at http://$[ip]:$[port]'
        printf '\nor, if you run this server locally (on your computer), at http://0.0.0.0:$[port]\n\n'
    else
        # Run it in the background, `-d` option
        docker run -d --rm --security-opt label:disable -v $HOME:/home/jovyan/work -v /tmp:/tmp -t --name sandbox_$[tutorial]_$[my_name] -h $[tutorial]-$[my_name] statisticalgenetics/$[tutorial]
        # Then login
        $cmd
    fi
    }

[update]
input: for_each = 'tutorial', concurrent = False
bash: expand = True
    docker pull statisticalgenetics/{_tutorial}

[useradd]
fail_if(len(my_name) == 0 or my_name == 'hub_user', msg = 'Please assign a username prefix, via ``--my-name`` option.')
parameter: num_users = 1
passwd = [random.randint(10000, 99999) for i in range(num_users)]
input: for_each = 'passwd', concurrent = False
bash: expand = True
  set -e
  if [ `id -u {my_name}_{_index+1} 2>/dev/null || echo -1` -ge 0 ]; then 
    userdel -r {my_name}_{_index+1} 2>/dev/null
  fi
  useradd -g docker {my_name}_{_index+1} -d /home/{my_name}_{_index+1} -m -s /bin/bash
  echo -e "{my_name}_{_passwd}\n{my_name}_{_passwd}" | passwd {my_name}_{_index+1}
  printf "\nNew user created: {my_name}_{_index+1}:{my_name}_{_passwd}\n"

[clean]
bash:
    docker stop $(docker ps -a -q) || true
    docker rm $(docker ps -a -q) || true
    docker rmi $(docker images -f "dangling=true" -q) || true
